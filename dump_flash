#! /usr/bin/env python
# %%
from __future__ import annotations
from pathlib import Path
from datetime import datetime
import subprocess
from tqdm import tqdm

# %%
if __name__ == "__main__":
    import argparse
    parser = argparse.ArgumentParser(
        description="Dump the flash memory CHARIOT."
    )
    parser.add_argument(
        "--output", "-o",
        type=Path,
        default=Path(
            "flashdump") / Path(f"flash-dump-{datetime.now().strftime('%Y%m%d-%H%M%S')}.bin"),
        help="Output file path (default: flash-dump-<timestamp>.bin)"
    )
    parser.add_argument(
        "--size", "-s",
        type=int,
        default=2 * 1024 * 1024,
        help="Size of the flash memory to dump in bytes (default: 2MB)"
    )
    parser.add_argument(
        "--base", "-b",
        type=lambda x: int(x, base=16),
        default=0x10000000,
        help="Base address of the flash memory (in hex, default: 0x10000000)"
    )
    parser.add_argument(
        'offset',
        type=lambda x: int(x, base=16),
        help="Offset in flash memory to start dumping from (in hex, e.g., 0xb000)"
    )
    args = parser.parse_args()
    output_path: Path = args.output
    output_dir = output_path.parent
    output_dir.mkdir(parents=True, exist_ok=True)
    size: int = args.size
    base: int = args.base
    offset: int = args.offset
    if offset < 0 or offset >= size:
        raise ValueError(
            f"Offset {offset:#x} is out of bounds for flash size {size} bytes")
    if size <= 0:
        raise ValueError("Size must be a positive integer")
    pbar = tqdm(total=size - offset, unit="B",
                unit_scale=True, desc="Dumping flash memory",
                dynamic_ncols=True)
    success = True
    with output_path.open("wb") as f:
        try:
            while offset < size:
                chunk = min(1024, size - offset)
                cmd = [
                    "probe-rs",
                    "read",
                    "b8",
                    f'{base + offset:#x}',
                    f'{chunk}',
                ]
                result = subprocess.run(cmd, capture_output=True)
                if result.returncode != 0:
                    print("Error executing probe-rs:")
                    print(result.stderr.decode())
                    success = False
                    break
                data = result.stdout
                data = data.strip().split()
                if len(data) != chunk:
                    print(
                        f"Warning: Expected {chunk} bytes, but got {len(data)} bytes")
                bytes = bytearray(int(byte, 16) for byte in data)
                f.write(bytes)
                pbar.update(len(bytes))
                offset += chunk
        except KeyboardInterrupt:
            print("Dumping interrupted by user")
        except Exception as e:
            print(f"An error occurred: {e}")
            success = False
    pbar.close()
    if success:
        print(f"Flash memory dumped to {output_path}")
    else:
        print("Failed to dump flash memory")
        output_path.unlink(missing_ok=True)
